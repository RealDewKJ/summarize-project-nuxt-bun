import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

async function main() {
  console.log('üå± Starting database seed...')

  // Use default data
  console.log('üìÅ Using default seed data...')
  
  const data = {
    meetingInfo: {
      title: '‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡∏ó‡∏µ‡∏°‡∏û‡∏±‡∏í‡∏ô‡∏≤ ‡∏õ‡∏µ 2568',
      date: '‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡∏ó‡∏µ‡πà 30 ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà 05/08/2568',
    },
    projectStats: {
      total: 44,
      inProgress: 30,
      completed: 14,
      issues: 12,
    },
    projects: {
      inProgress: [
        'App AtlasMonitor',
        'Healthflow API',
        'MyAtlas',
        'BMS HOSxP+ Mobile (ER)',
        'BMS HOSxP+ (‡∏ö‡∏£‡∏¥‡∏à‡∏≤‡∏Ñ‡∏≠‡∏ß‡∏±‡∏¢‡∏ß‡∏∞)',
        'Diagnosis AI (HOSxP)',
        'BMS Notification Services (Flutter .exe)',
        'Rx Intervention',
        'EHP ‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡πá‡∏ö‡∏†‡∏≤‡∏û‡∏Ñ‡∏ô‡πÑ‡∏Ç‡πâ',
        'Medication Reconcilliation',
        'laboratory ‡∏£‡∏∞‡∏ö‡∏ö‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ú‡∏• lab',
        'EHP ‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏û‡πá‡∏Ñ‡πÄ‡∏Å‡∏ï‡πÄ‡∏™‡∏£‡∏¥‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏á‡∏≤‡∏°',
        'Distict MOPH PC-1 Dashboard Flutter Web (PHR Viewer)',
        'HOSxP ‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°‡∏ö‡πâ‡∏≤‡∏ô',
        'Rx Intervention Dashboard',
        'BGS NOTIFY',
        '‡∏ï‡∏π‡πâ‡πÄ‡∏õ‡∏¥‡∏î‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏ß‡∏ä‡∏†‡∏±‡∏ì‡∏ë‡πå‡∏¢‡∏≤ Web',
        'Dental ü¶∑',
        '‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏±‡∏ô‡∏ï‡∏Å‡∏£‡∏£‡∏° EHP ‡∏Å‡∏±‡∏ö Tomorrow Smile',
        'Stretcher Center (‡∏®‡∏π‡∏ô‡∏¢‡πå‡πÄ‡∏õ‡∏•)',
        'NCDs Registry Dashboard',
        '‡πÅ‡∏û‡∏ó‡∏¢‡πå‡πÅ‡∏ú‡∏ô‡∏à‡∏µ‡∏ô',
        'HOSxP ‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏ï‡∏±‡∏ß tool ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å phase 2',
        'ER Registry Dashboard',
        'Tools ‡∏£‡∏û.‡∏Å‡∏£‡∏∞‡∏ó‡∏∏‡πà‡∏°‡πÅ‡∏ö‡∏ô',
        '‡∏£‡∏∞‡∏ö‡∏ö‡∏Ñ‡∏£‡∏∏‡∏†‡∏±‡∏ì‡∏ë‡πå',
        'Odin Med Check ‡∏™‡∏≤‡∏¢‡∏û‡∏≤‡∏ô‡∏¢‡∏≤',
        'Excellence Care',
        'HOSxPLabLinkOnline',
        'BMS Lab Online (API, AGENT)',
        '‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏Ñ‡πà‡∏≤ Vital Signs',
        'AtlasHomeCare (‡πÄ‡∏°‡∏ô‡∏π‡∏á‡∏≤‡∏ô‡∏ä‡∏∏‡∏°‡∏ä‡∏ô ‚Üí ‡∏™‡∏±‡πà‡∏á LAB)',
        '‡πÑ‡∏°‡πâ‡∏Å‡∏±‡πâ‡∏ô‡∏´‡∏°‡∏π‡πà‡∏ö‡πâ‡∏≤‡∏ô WEB',
        'Dashboard ‡∏Å‡∏•‡∏≤‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏• (Monitor ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏Ç‡∏≠‡∏á ‡∏™‡∏õ‡∏™‡∏ä.)',
        'EHP-Consent',
        'MOPH Death Registry Dashboard',
        'Vital Sign GW',
        'NHIP PCU',
        'BMS-Consent',
        'BMS Smart Card Plugin Flutter',
        'Tools migration Crma',
        '‡∏ó‡∏î‡∏•‡∏≠‡∏á‡∏á‡∏≤‡∏ô',
        '‡∏£‡∏∞‡∏ö‡∏ö Refer ‡πÅ‡∏•‡∏∞ MOPH Refer ‡πÉ‡∏ô EHP',
      ],
      completed: [
        '‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏´‡∏°‡∏π‡πà‡∏ö‡πâ‡∏≤‡∏ô‡∏à‡∏±‡∏î‡∏™‡∏£‡∏£',
        'BMS Life ‡πÄ‡∏ö‡∏¥‡∏Å OT ‡∏à‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏û‡∏±‡∏Å ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏á‡∏ó‡∏µ‡∏° IM ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏°‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô',
        'Tools ‡∏£‡∏û.‡∏™‡∏ï my pcu',
      ],
      issues: [
        'App AtlasMonitor',
        'Healthflow API',
        'MyAtlas',
        'BMS HOSxP+ Mobile (ER)',
        'BMS HOSxP+ (‡∏ö‡∏£‡∏¥‡∏à‡∏≤‡∏Ñ‡∏≠‡∏ß‡∏±‡∏¢‡∏ß‡∏∞)',
        'laboratory ‡∏£‡∏∞‡∏ö‡∏ö‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ú‡∏• lab',
        'HOSxP ‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°‡∏ö‡πâ‡∏≤‡∏ô',
        'Tools ‡∏£‡∏û.‡∏Å‡∏£‡∏∞‡∏ó‡∏∏‡πà‡∏°‡πÅ‡∏ö‡∏ô',
        'AtlasHomeCare (‡πÄ‡∏°‡∏ô‡∏π‡∏á‡∏≤‡∏ô‡∏ä‡∏∏‡∏°‡∏ä‡∏ô ‚Üí ‡∏™‡∏±‡πà‡∏á LAB)',
        'Dashboard ‡∏Å‡∏•‡∏≤‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏• (Monitor ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏Ç‡∏≠‡∏á ‡∏™‡∏õ‡∏™‡∏ä.)',
        '‡∏ó‡∏î‡∏•‡∏≠‡∏á‡∏á‡∏≤‡∏ô',
        '‡∏£‡∏∞‡∏ö‡∏ö Refer ‡πÅ‡∏•‡∏∞ MOPH Refer ‡πÉ‡∏ô EHP',
      ],
    },
    projectDetails: [],
    issuesDetails: [
      {
        project: 'App AtlasMonitor',
        description: '‡∏á‡∏≤‡∏ô‡∏ä‡∏∏‡∏°‡∏ä‡∏ô ‡πÄ‡∏°‡∏ô‡∏π‡∏Ñ‡∏±‡∏î‡∏Å‡∏£‡∏≠‡∏á‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á ‡∏ß‡∏≤‡∏á UI ‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏™‡πà‡∏ß‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•',
        priority: 'high',
      },
      {
        project: 'Healthflow API',
        description: '‡∏£‡∏≠ requirement API ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° (‡∏´‡∏≠‡∏ö‡∏´‡∏¥‡∏î)',
        priority: 'medium',
      },
      {
        project: 'MyAtlas',
        description: '‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏ö‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏´‡∏≠‡∏ö‡∏´‡∏∑‡∏î ‡πÅ‡∏•‡∏∞‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÅ‡∏•‡πâ‡∏ß ‡∏£‡∏≠‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ï‡∏≤‡∏° requirement ‡πÉ‡∏´‡∏°‡πà',
        priority: 'medium',
      },
      {
        project: 'BMS HOSxP+ Mobile (ER)',
        description: '‡∏™‡∏±‡πà‡∏á Doctor Order (Med, Lab, Xray, ‡∏´‡∏±‡∏ï‡∏ñ‡∏Å‡∏≤‡∏£, Set OR)',
        priority: 'high',
      },
      {
        project: 'BMS HOSxP+ (‡∏ö‡∏£‡∏¥‡∏à‡∏≤‡∏Ñ‡∏≠‡∏ß‡∏±‡∏¢‡∏ß‡∏∞)',
        description: '‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô UI ‡πÉ‡∏´‡∏°‡πà',
        priority: 'medium',
      },
      {
        project: 'laboratory ‡∏£‡∏∞‡∏ö‡∏ö‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ú‡∏• lab',
        description: '‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏Å lab ‡πÅ‡∏•‡πâ‡∏ß‡∏Å‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏ô‡∏Å‡∏£‡∏≤‡∏ü ‡πÄ‡∏™‡πâ‡∏ô‡∏Å‡∏£‡∏≤‡∏ü‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏ï‡πà‡∏ä‡∏∑‡∏≠ series ‡πÑ‡∏°‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ï‡∏≤‡∏°‡∏ä‡∏∑‡πà‡∏≠ lab ‡πÉ‡∏´‡πâ',
        priority: 'high',
      },
      {
        project: 'HOSxP ‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°‡∏ö‡πâ‡∏≤‡∏ô',
        description: '‡∏™‡πà‡∏á‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°‡∏ö‡πâ‡∏≤‡∏ô ‡∏à‡∏≤‡∏Å‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠ IPD, ‡∏•‡∏î ToKen AI ‡∏•‡∏á‡∏°‡∏≤‡∏≠‡∏µ‡∏Å ‡πÇ‡∏î‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏†‡∏≤‡∏©‡∏≤ English ‡πÅ‡∏ó‡∏ô ‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢',
        priority: 'high',
      },
      {
        project: 'Tools ‡∏£‡∏û.‡∏Å‡∏£‡∏∞‡∏ó‡∏∏‡πà‡∏°‡πÅ‡∏ö‡∏ô',
        description: '‡πÅ‡∏õ‡∏•‡∏á‡∏£‡∏π‡∏õ tiff ‡πÄ‡∏õ‡πá‡∏ô jpg - ‡∏•‡∏≠‡∏á‡∏ó‡∏≥‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô‡∏°‡∏≤‡∏î‡∏∂‡∏á‡πÅ‡∏•‡∏∞‡πÅ‡∏õ‡∏•‡∏á‡∏ö‡∏ô code dephi ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
        priority: 'medium',
      },
      {
        project: 'AtlasHomeCare (‡πÄ‡∏°‡∏ô‡∏π‡∏á‡∏≤‡∏ô‡∏ä‡∏∏‡∏°‡∏ä‡∏ô ‚Üí ‡∏™‡∏±‡πà‡∏á LAB)',
        description: '‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö requirement ‡πÉ‡∏´‡πâ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° 1. ‡πÄ‡∏°‡∏ô‡∏π‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ AuthenCode 2. ‡∏ä‡πà‡∏≠‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ CID, HN, ‡∏ä‡∏∑‡πà‡∏≠ 3. LAB ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÉ‡∏ö‡∏™‡∏±‡πà‡∏á 4. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏õ‡∏¥‡∏î visit',
        priority: 'high',
      },
      {
        project: 'Dashboard ‡∏Å‡∏•‡∏≤‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏• (Monitor ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏Ç‡∏≠‡∏á ‡∏™‡∏õ‡∏™‡∏ä.)',
        description: 'flutter ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏ü‡∏•‡πå Excel .xls ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏Å‡πà‡∏≤ ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡πÅ‡∏Ñ‡πà .xlsx',
        priority: 'medium',
      },
      {
        project: '‡∏ó‡∏î‡∏•‡∏≠‡∏á‡∏á‡∏≤‡∏ô',
        description: 'VS Code ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏±‡∏ô flutter ‡∏ú‡πà‡∏≤‡∏ô Emulator ‡πÑ‡∏î‡πâ',
        priority: 'low',
      },
      {
        project: '‡∏£‡∏∞‡∏ö‡∏ö Refer ‡πÅ‡∏•‡∏∞ MOPH Refer ‡πÉ‡∏ô EHP',
        description: '‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠ Refer In ‡πÅ‡∏•‡πâ‡∏ß‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà',
        priority: 'medium',
      },
    ],
    codeReview: [
      {
        project: 'NHIP - ‡∏Ç‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏°‡∏ô‡∏π‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡πÉ‡∏ô‡∏ä‡∏∏‡∏°‡∏ä‡∏ô Community Activity',
        description: '‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Source Code ‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà',
        priority: 'medium',
      },
      {
        project: 'NHIP - ‡∏Ç‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏Ñ‡πà‡∏≤ Vital Signs (One Stop Service)',
        description: '‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Source Code ‡πÅ‡∏•‡∏∞‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà',
        priority: 'medium',
      },
    ],
    codeReviewer: '‡∏≠‡∏≤‡∏£‡∏¢‡∏≤ ‡∏â‡∏≤‡∏¢‡∏≤‡∏á‡∏≤‡∏° (‡πÄ‡∏≠‡∏¥‡∏£‡πå‡∏ô)',
  }

  console.log('üìñ Using default seed data')

  // Clear existing data
  await prisma.codeReview.deleteMany()
  await prisma.issueDetail.deleteMany()
  await prisma.projectDetail.deleteMany()
  await prisma.project.deleteMany()
  await prisma.meetingData.deleteMany()

  console.log('üóëÔ∏è  Cleared existing data')

  // Create meeting data with all related records
  const meetingData = await prisma.meetingData.create({
    data: {
      title: data.meetingInfo.title,
      date: data.meetingInfo.date,
      total: data.projectStats.total,
      inProgress: data.projectStats.inProgress,
      completed: data.projectStats.completed,
      issues: data.projectStats.issues,
      codeReviewer: data.codeReviewer,
      projects: {
        create: [
          ...(data.projects.inProgress || []).map((name: string) => ({
            name,
            status: 'inProgress',
          })),
          ...(data.projects.completed || []).map((name: string) => ({
            name,
            status: 'completed',
          })),
          ...(data.projects.issues || []).map((name: string) => ({
            name,
            status: 'issues',
          })),
        ],
      },
      projectDetails: {
        create: (data.projectDetails || []).map((detail: any) => ({
          orderNum: parseInt(detail.‡∏•‡∏≥‡∏î‡∏±‡∏ö) || 0,
          systemName: detail.‡∏£‡∏∞‡∏ö‡∏ö‡∏á‡∏≤‡∏ô,
          responsible: detail.‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö,
          pm: detail.PM,
          problems: JSON.stringify(detail.‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏û‡∏ö || []),
          solutions: JSON.stringify(detail.‡∏ß‡∏¥‡∏ò‡∏µ‡πÅ‡∏Å‡πâ‡∏õ‡∏±‡∏ç‡∏´‡∏≤ || []),
          notes: JSON.stringify(detail.‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏ || []),
        })),
      },
      issuesDetails: {
        create: (data.issuesDetails || []).map((issue: any) => ({
          project: issue.project,
          description: issue.description,
          priority: issue.priority,
        })),
      },
      codeReviews: {
        create: (data.codeReview || []).map((review: any) => ({
          project: review.project,
          description: review.description,
          priority: review.priority,
        })),
      },
    },
  })

  console.log(`‚úÖ Seed completed! Created meeting data with ID: ${meetingData.id}`)
  console.log(`   - ${data.projects.inProgress.length} projects in progress`)
  console.log(`   - ${data.projects.completed.length} completed projects`)
  console.log(`   - ${data.projectDetails.length} project details`)
  console.log(`   - ${data.issuesDetails.length} issues`)
  console.log(`   - ${data.codeReview.length} code reviews`)
}

main()
  .catch((e) => {
    console.error('‚ùå Seed failed:', e)
    process.exit(1)
  })
  .finally(async () => {
    await prisma.$disconnect()
  })